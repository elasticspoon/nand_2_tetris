// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in = instruction[15], out= isAInst);
    Not(in = isAInst, out= isCInst);

    PC(in= regA, load= doJump, inc= nextInst, reset= reset, out[0..14]= pc);

    // write M if C inst and inst[3]
    And(a= isCInst, b= instruction[3], out= writeM);

    // Reg D Logic
    // load D if C inst and inst [4]
    And(a= instruction[4], b= isCInst, out= loadRegD);
    // NOTE: this needs a special built-in to pass tests. 
    DRegister(in= aluOut, load= loadRegD, out= regD); // D reg

    // Reg A Logic
    // load A if A inst or C inst and inst[5]
    And(a= isCInst, b= instruction[5], out= cInstAndLoadA);
    Or(a= isAInst, b= cInstAndLoadA, out= loadRegA);
    Mux16(a= instruction, b= aluOut, sel= isCInst, out= instOrAlu); // Mux for A Reg
    Register(in= instOrAlu, load= loadRegA, out= regA, out[0..14]=addressM); // A reg

    Mux16(a= regA, b= inM, sel= instruction[12], out= regAorM);
    ALU(x= regD, y= regAorM, zx= instruction[11], nx= instruction[10],
        zy= instruction[9], ny= instruction[8], f= instruction[7], 
        no= instruction[6], out= aluOut, out= outM, zr= aluOutZero, ng= aluOutNeg);
    Or(a= aluOutNeg, b= aluOutZero,out= aluOutNotPos);
    Not(in =aluOutNotPos, out=aluOutPos);

    // Jump Logic
    And(a=aluOutNeg, b=instruction[2], out=jumpNeg);
    And(a=aluOutZero, b=instruction[1], out=jumpZero);
    And(a=aluOutPos, b=instruction[0], out=jumpPos);
    Or(a=jumpPos, b=jumpNeg, out=jumpPosOrNeg);
    Or(a=jumpPosOrNeg, b=jumpZero, out=jumpTrue);
    And(a= isCInst, b=jumpTrue, out=doJump);
    Not(in= doJump, out= nextInst);
}
