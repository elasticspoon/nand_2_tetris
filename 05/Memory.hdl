/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    Not(in=address[14], out=addrRam); // if not top bit then ram
    And(a=addrRam , b=load , out=loadRam ); // if load + part addr then load than part
    
    Not(in=address[13], out=not13 );
    And(a=address[14], b=not13, out=addrScreen); // if top two bits 10 then screen
    And(a=addrScreen , b=load , out=loadScreen ); // if load + part addr then load than part

    // keyboard is exactly 0110000000000000
    Or8Way(in=address[0..7], out=notAddrKeyboardLower); // bottom is not all 0
    Or8Way(in[0..4]=address[8..12], in[5]=not13, in[6]=addrRam,  out=notAddrKeyboardUpper); // top is not 011000000
    Or(a= notAddrKeyboardUpper, b= notAddrKeyboardLower, out=notAddrKeyboard ); 
    Not(in=notAddrKeyboard, out=addrKeyboard);

    RAM16K(in=in , load=loadRam, address=address[0..13], out=outRam);
    Screen(in=in , load=loadScreen, address=address[0..12], out=outScreen);
    Keyboard(out=outKeyboard);

    Mux16(a= false, b= outKeyboard, sel= addrKeyboard, out= outKeyOrNull);
    Mux16(a= outKeyOrNull, b= outScreen, sel= addrScreen, out= outScreenKeyOrNull);
    Mux16(a= outScreenKeyOrNull, b= outRam, sel= addrRam, out= out);
}
